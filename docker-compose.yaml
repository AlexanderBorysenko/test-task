version: "3.9"

services:
  database:
    image: postgres:18
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [ app-net ]

  rabbitmq:
    image: rabbitmq:4-management
    ports:
      - "15672:15672" # UI
      - "5672:5672" # AMQP
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [ app-net ]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${SPRING_RABBITMQ_USERNAME}
      SPRING_RABBITMQ_PASSWORD: ${SPRING_RABBITMQ_PASSWORD}
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks: [ app-net ]

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      REQUEST_QUEUE: item.processing.request
      RESPONSE_QUEUE: item.processing.response
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks: [ app-net ]
    deploy:
      replicas: 1

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_started
    ports:
      - "80:80"
    networks: [ app-net ]

volumes:
  pgdata:


networks:
  app-net:

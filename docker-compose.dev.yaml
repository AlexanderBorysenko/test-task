version: "3.9"

services:
    database:
        image: postgres:18
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - pgdata:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks: [ app-net ]

    rabbitmq:
        image: rabbitmq:4-management
        restart: unless-stopped
        environment:
            RABBITMQ_USER: ${RABBITMQ_USER}
            RABBITMQ_PASS: ${RABBITMQ_PASS}
        ports:
            - "15672:15672"
            - "5672:5672"
        healthcheck:
            test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks: [ app-net ]

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile.dev
        environment:
            SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
            SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
            SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
            RABBITMQ_USERNAME: ${RABBITMQ_USER}
            RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
        volumes:
            - ./backend:/app
            - maven_cache:/root/.m2
        depends_on:
            database:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        ports:
            - "8080:8080"
        networks: [ app-net ]

    worker:
        build:
            context: ./worker
            dockerfile: Dockerfile.dev
        environment:
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
            RABBITMQ_USERNAME: ${RABBITMQ_USER}
            RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
        volumes:
            - ./worker:/app
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks: [ app-net ]

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile.dev
        volumes:
            - ./frontend:/app
            - frontend_node_modules:/app/node_modules
        depends_on:
            backend:
                condition: service_started
        ports:
            - "4200:4200"
            - "49153:49153"
        networks: [ app-net ]

volumes:
    pgdata:
    maven_cache:
    frontend_node_modules:


networks:
    app-net:
